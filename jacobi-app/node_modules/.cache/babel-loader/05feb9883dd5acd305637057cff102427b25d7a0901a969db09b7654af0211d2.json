{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dllac\\\\Documents\\\\App-React-JS\\\\Jacobi-Metodo\\\\jacobi-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PdfGenerator from './components/PdfGenerator';\nimport Swal from 'sweetalert2';\nimport './App.css';\nimport './alert.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [matrixSize, setMatrixSize] = useState(3); // Estado para o tamanho da matriz (não utilizado no código fornecido)\n  const [tolerance, setTolerance] = useState(0.01); // Estado para a tolerância de erro\n  const [maxIter, setMaxIter] = useState(50); // Estado para o número máximo de iterações\n  const [matrix, setMatrix] = useState([]); // Estado para a matriz A do sistema linear\n  const [vectorB, setVectorB] = useState([]); // Estado para o vetor b do sistema linear\n  const [solution, setSolution] = useState([]); // Estado para a solução do sistema linear\n  const [iterations, setIterations] = useState(0); // Estado para o número de iterações realizadas\n  const [initialGuess, setInitialGuess] = useState(''); // Estado para o chute inicial\n  const [iterationResults, setIterationResults] = useState([]); // Estado para armazenar os resultados de cada iteração\n\n  // Função para lidar com a mudança de valores na matriz A\n  const handleMatrixChange = (i, j, value) => {\n    const newMatrix = [...matrix];\n    if (!newMatrix[i]) {\n      newMatrix[i] = [];\n    }\n    newMatrix[i][j] = parseFloat(value);\n    setMatrix(newMatrix);\n  };\n\n  // Função para lidar com a mudança de valores no vetor b\n  const handleVectorChange = (i, value) => {\n    const newVector = [...vectorB];\n    newVector[i] = parseFloat(value);\n    setVectorB(newVector);\n  };\n\n  // Função para lidar com o envio do formulário (submissão do método de Gauss-Jacobi)\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Lógica do Método de Gauss-Jacobi\n    const result = gaussJacobiMethod(matrix, vectorB, tolerance, maxIter, initialGuess);\n\n    // Atualiza os estados com os resultados obtidos\n    setSolution(result.solution); // solução\n    setIterations(result.iterations); // quantidade de iteração\n    setIterationResults(result.iterationResults); // resultados das iterações\n  };\n\n  // Função que implementa o Método de Gauss-Jacobi\n  const gaussJacobiMethod = (A, b, tol, maxIter, initialGuess) => {\n    // Usa o chute inicial se fornecido, caso contrário, preenche com 0\n    // Se o usuário forneceu um chute inicial (initialGuess), ele é dividido em um array de números (com .split() e .map(Number)).\n    let x = initialGuess ? initialGuess.split(' ').map(Number) : new Array(b.length).fill(0);\n\n    // Inicializa o contador de iterações em 0, que será usado para controlar o número de iterações feitas\n    let iterations = 0;\n\n    // Define um valor inicial de erro, que será maior que a tolerância inicialmente para garantir que o loop seja executado ao menos uma vez.\n    // Aqui, tol + 1 garante que o erro inicial seja maior que a tolerância.\n    let error = tol + 1;\n\n    // Array para armazenar as soluções (valores de x) de cada iteração.\n    // Isso é útil para visualizar o progresso das iterações.\n    const allIterations = [];\n\n    // Loop principal do método de Gauss-Jacobi.\n    // O loop continua enquanto o erro for maior que a tolerância (tol) e o número de iterações for menor que o máximo permitido (maxIter).\n    while (error > tol && iterations < maxIter) {\n      // Cria uma nova estimativa para os valores de x. \n      // Isso evita modificar o array original (x) enquanto calculamos novos valores.\n      const xNew = [...x];\n\n      // Iteração sobre cada equação (linha) do sistema A * x = b.\n      // Para cada equação, calculamos o valor correspondente de x[i].\n      for (let i = 0; i < A.length; i++) {\n        let sum = b[i]; // Começa com o valor de b[i] (o termo independente da equação).\n\n        // Para cada elemento da linha A[i], exceto A[i][i], subtrai A[i][j] * x[j] da soma.\n        // Isso reflete o cálculo da soma dos produtos dos elementos da matriz A com as estimativas atuais de x.\n        for (let j = 0; j < A.length; j++) {\n          if (i !== j) {\n            // Ignora o termo diagonal A[i][i], pois ele será usado depois para dividir.\n            sum -= A[i][j] * x[j]; // Subtrai A[i][j] * x[j] de sum.\n          }\n        }\n\n        // Calcula a nova estimativa para x[i] dividindo a soma por A[i][i] (o termo da diagonal).\n        xNew[i] = sum / A[i][i]; // Atualiza xNew[i] com a nova estimativa.\n      }\n\n      // Faz uma cópia dos valores anteriores de x antes de atualizar, para calcular o erro na próxima etapa.\n      const previousX = [...x];\n\n      // Cálculo do erro absoluto. \n      // O erro é definido como o maior valor da diferença entre as estimativas novas e antigas de x.\n      // Isso nos dá uma medida de quanto as soluções estão mudando a cada iteração.\n      error = Math.max(...xNew.map((xi, idx) => Math.abs(xi - previousX[idx])));\n\n      // Atualiza x com os novos valores calculados (xNew) para serem usados na próxima iteração.\n      x = xNew;\n\n      // Incrementa o contador de iterações.\n      iterations++;\n\n      // Armazena os resultados de cada iteração para fins de visualização ou análise posterior.\n      // Cada iteração registra os valores de x naquele ponto do cálculo.\n      allIterations.push([...x]);\n    }\n\n    // Verifica se o método convergiu\n    if (error > tol) {\n      Swal.fire({\n        icon: 'info',\n        title: 'Convergência não alcançada!',\n        text: 'O método de Gauss-Jacobi não convergiu dentro do número máximo de iterações.',\n        customClass: {\n          icon: 'my-icon-class',\n          popup: 'my-popup-class',\n          title: 'my-title-class',\n          content: 'my-content-class',\n          confirmButton: 'my-button-class'\n        }\n      });\n    }\n\n    // Retorna a solução encontrada, o número de iterações e os resultados de todas as iterações\n    return {\n      solution: x,\n      iterations,\n      iterationResults: allIterations\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"M\\xE9todo de Gauss-Jacobi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"App-form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-size-matriz\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"App-size-matriz-label\",\n            children: \"Tamanho da Matriz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"App-size-matriz-numer\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: matrixSize,\n              onChange: e => setMatrixSize(parseInt(e.target.value) || 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-sub-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"App-title-h2\",\n            children: \"Matriz A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), Array.from({\n          length: matrixSize\n        }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"matrix-row-row\",\n          children: Array.from({\n            length: matrixSize\n          }).map((_, j) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => handleMatrixChange(i, j, e.target.value),\n            placeholder: `A[${i + 1}][${j + 1}]`,\n            className: \"matrix-input\"\n          }, `${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"App-title-h2\",\n          children: \"Vetor b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vector-container\",\n          children: Array.from({\n            length: matrixSize\n          }).map((_, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => handleVectorChange(i, e.target.value),\n            placeholder: `b[${i + 1}]`,\n            className: \"vector-input\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"App-label\",\n              children: \"Chute Inicial (opcional):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: initialGuess,\n              onChange: e => setInitialGuess(e.target.value),\n              placeholder: \"ex: 1 1 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"App-label\",\n              children: \"Toler\\xE2ncia:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: tolerance,\n              onChange: e => setTolerance(parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"App-label\",\n              children: \"N M\\xE1x de Itera\\xE7\\xF5es:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: maxIter,\n              onChange: e => setMaxIter(parseInt(e.target.value) || 100)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => window.location.reload(),\n            children: \"Limpar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Calcular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), solution.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resultado-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"titulo-resultado\",\n          children: \"Solu\\xE7\\xE3o Aproximada\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"solucao\",\n          children: solution.map((val, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"x\", /*#__PURE__*/_jsxDEV(\"sub\", {\n              children: idx + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 20\n            }, this), \" = \", val.toFixed(4), idx < solution.length - 1 && ', ']\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"iteracoes\",\n          children: [\"Quantidade de Itera\\xE7\\xF5es: \", iterations]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PdfGenerator, {\n          results: iterationResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"App-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xC1lgebra Linear - BSI UFRA | 2023\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"H/HMsZXWh+F+nRhVrZmJ9HdLlug=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PdfGenerator","Swal","jsxDEV","_jsxDEV","App","_s","matrixSize","setMatrixSize","tolerance","setTolerance","maxIter","setMaxIter","matrix","setMatrix","vectorB","setVectorB","solution","setSolution","iterations","setIterations","initialGuess","setInitialGuess","iterationResults","setIterationResults","handleMatrixChange","i","j","value","newMatrix","parseFloat","handleVectorChange","newVector","handleSubmit","event","preventDefault","result","gaussJacobiMethod","A","b","tol","x","split","map","Number","Array","length","fill","error","allIterations","xNew","sum","previousX","Math","max","xi","idx","abs","push","fire","icon","title","text","customClass","popup","content","confirmButton","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","e","parseInt","target","from","_","placeholder","step","onClick","window","location","reload","val","toFixed","results","_c","$RefreshReg$"],"sources":["C:/Users/dllac/Documents/App-React-JS/Jacobi-Metodo/jacobi-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PdfGenerator from './components/PdfGenerator';\nimport Swal from 'sweetalert2';\nimport './App.css';\nimport './alert.css';\n\nfunction App() {\n  const [matrixSize, setMatrixSize] = useState(3); // Estado para o tamanho da matriz (não utilizado no código fornecido)\n  const [tolerance, setTolerance] = useState(0.01); // Estado para a tolerância de erro\n  const [maxIter, setMaxIter] = useState(50); // Estado para o número máximo de iterações\n  const [matrix, setMatrix] = useState([]); // Estado para a matriz A do sistema linear\n  const [vectorB, setVectorB] = useState([]); // Estado para o vetor b do sistema linear\n  const [solution, setSolution] = useState([]); // Estado para a solução do sistema linear\n  const [iterations, setIterations] = useState(0); // Estado para o número de iterações realizadas\n  const [initialGuess, setInitialGuess] = useState(''); // Estado para o chute inicial\n  const [iterationResults, setIterationResults] = useState([]); // Estado para armazenar os resultados de cada iteração\n\n  // Função para lidar com a mudança de valores na matriz A\n  const handleMatrixChange = (i, j, value) => {\n    const newMatrix = [...matrix];\n    if (!newMatrix[i]) {\n      newMatrix[i] = [];\n    }\n    newMatrix[i][j] = parseFloat(value);\n    setMatrix(newMatrix);\n  };\n\n  // Função para lidar com a mudança de valores no vetor b\n  const handleVectorChange = (i, value) => {\n    const newVector = [...vectorB];\n    newVector[i] = parseFloat(value);\n    setVectorB(newVector);\n  };\n\n  // Função para lidar com o envio do formulário (submissão do método de Gauss-Jacobi)\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // Lógica do Método de Gauss-Jacobi\n    const result = gaussJacobiMethod(matrix, vectorB, tolerance, maxIter, initialGuess);\n\n    // Atualiza os estados com os resultados obtidos\n    setSolution(result.solution); // solução\n    setIterations(result.iterations); // quantidade de iteração\n    setIterationResults(result.iterationResults); // resultados das iterações\n  };\n\n  // Função que implementa o Método de Gauss-Jacobi\n  const gaussJacobiMethod = (A, b, tol, maxIter, initialGuess) => {\n    // Usa o chute inicial se fornecido, caso contrário, preenche com 0\n    // Se o usuário forneceu um chute inicial (initialGuess), ele é dividido em um array de números (com .split() e .map(Number)).\n    let x = initialGuess ? initialGuess.split(' ').map(Number) : new Array(b.length).fill(0);\n\n    // Inicializa o contador de iterações em 0, que será usado para controlar o número de iterações feitas\n    let iterations = 0;\n\n    // Define um valor inicial de erro, que será maior que a tolerância inicialmente para garantir que o loop seja executado ao menos uma vez.\n    // Aqui, tol + 1 garante que o erro inicial seja maior que a tolerância.\n    let error = tol + 1;\n\n    // Array para armazenar as soluções (valores de x) de cada iteração.\n    // Isso é útil para visualizar o progresso das iterações.\n    const allIterations = [];\n\n    // Loop principal do método de Gauss-Jacobi.\n    // O loop continua enquanto o erro for maior que a tolerância (tol) e o número de iterações for menor que o máximo permitido (maxIter).\n    while (error > tol && iterations < maxIter) {\n      // Cria uma nova estimativa para os valores de x. \n      // Isso evita modificar o array original (x) enquanto calculamos novos valores.\n      const xNew = [...x];\n\n      // Iteração sobre cada equação (linha) do sistema A * x = b.\n      // Para cada equação, calculamos o valor correspondente de x[i].\n      for (let i = 0; i < A.length; i++) {\n        let sum = b[i]; // Começa com o valor de b[i] (o termo independente da equação).\n\n        // Para cada elemento da linha A[i], exceto A[i][i], subtrai A[i][j] * x[j] da soma.\n        // Isso reflete o cálculo da soma dos produtos dos elementos da matriz A com as estimativas atuais de x.\n        for (let j = 0; j < A.length; j++) {\n          if (i !== j) { // Ignora o termo diagonal A[i][i], pois ele será usado depois para dividir.\n            sum -= A[i][j] * x[j]; // Subtrai A[i][j] * x[j] de sum.\n          }\n        }\n\n        // Calcula a nova estimativa para x[i] dividindo a soma por A[i][i] (o termo da diagonal).\n        xNew[i] = sum / A[i][i]; // Atualiza xNew[i] com a nova estimativa.\n      }\n\n      // Faz uma cópia dos valores anteriores de x antes de atualizar, para calcular o erro na próxima etapa.\n      const previousX = [...x];\n\n      // Cálculo do erro absoluto. \n      // O erro é definido como o maior valor da diferença entre as estimativas novas e antigas de x.\n      // Isso nos dá uma medida de quanto as soluções estão mudando a cada iteração.\n      error = Math.max(...xNew.map((xi, idx) => Math.abs(xi - previousX[idx])));\n\n      // Atualiza x com os novos valores calculados (xNew) para serem usados na próxima iteração.\n      x = xNew;\n\n      // Incrementa o contador de iterações.\n      iterations++;\n\n      // Armazena os resultados de cada iteração para fins de visualização ou análise posterior.\n      // Cada iteração registra os valores de x naquele ponto do cálculo.\n      allIterations.push([...x]);\n    }\n\n    // Verifica se o método convergiu\n    if (error > tol) {\n      Swal.fire({\n        icon: 'info',\n        title: 'Convergência não alcançada!',\n        text: 'O método de Gauss-Jacobi não convergiu dentro do número máximo de iterações.',\n        customClass: {\n          icon: 'my-icon-class',\n          popup: 'my-popup-class',\n          title: 'my-title-class',\n          content: 'my-content-class',\n          confirmButton: 'my-button-class'\n        },\n      });\n    }\n\n    // Retorna a solução encontrada, o número de iterações e os resultados de todas as iterações\n    return { solution: x, iterations, iterationResults: allIterations };\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Método de Gauss-Jacobi</h1>\n      </header>\n      <main className=\"App-main\">\n        <form className='App-form' onSubmit={handleSubmit}>\n          <div className='App-size-matriz'>\n            <label className='App-size-matriz-label'>\n              Tamanho da Matriz\n            </label>\n            <div className='App-size-matriz-numer'>\n              <input\n                type=\"number\"\n                value={matrixSize}\n                onChange={(e) => setMatrixSize(parseInt(e.target.value) || 2)}\n              />\n            </div>\n          </div>\n\n          <div className='App-sub-header'>\n            <h2 className='App-title-h2'>Matriz A</h2>\n          </div>\n          {Array.from({ length: matrixSize }).map((_, i) => (\n            <div key={i} className=\"matrix-row-row\">\n              {Array.from({ length: matrixSize }).map((_, j) => (\n                <input\n                  key={`${i}-${j}`}\n                  type=\"text\"\n                  onChange={(e) => handleMatrixChange(i, j, e.target.value)}\n                  placeholder={`A[${i + 1}][${j + 1}]`}\n                  className=\"matrix-input\"\n                />\n              ))}\n            </div>\n          ))}\n\n\n          <h2 className='App-title-h2'>Vetor b</h2>\n          <div className=\"vector-container\">\n            {Array.from({ length: matrixSize }).map((_, i) => (\n              <input\n                key={i}\n                type=\"text\"\n                onChange={(e) => handleVectorChange(i, e.target.value)}\n                placeholder={`b[${i + 1}]`}\n                className=\"vector-input\"\n              />\n            ))}\n          </div>\n\n          <div className=\"input-row\">\n            <div className=\"input-column\">\n              <label className='App-label'>Chute Inicial (opcional):</label>\n              <input\n                type=\"text\"\n                value={initialGuess}\n                onChange={(e) => setInitialGuess(e.target.value)}\n                placeholder=\"ex: 1 1 1\"\n              />\n            </div>\n            <div className=\"input-column\">\n              <label className='App-label'>Tolerância:</label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={tolerance}\n                onChange={(e) => setTolerance(parseFloat(e.target.value))}\n              />\n            </div>\n            <div className=\"input-column\">\n              <label className='App-label'>N Máx de Iterações:</label>\n              <input\n                type=\"number\"\n                value={maxIter}\n                onChange={(e) => setMaxIter(parseInt(e.target.value) || 100)}\n              />\n            </div>\n          </div>\n          <div className=\"button-container\">\n            <button type=\"button\" onClick={() => window.location.reload()}>Limpar</button>\n            <button type=\"submit\">Calcular</button>\n          </div>\n        </form>\n\n        {solution.length > 0 && (\n          <div className=\"resultado-container\">\n            <h2 className=\"titulo-resultado\">Solução Aproximada</h2>\n            <p className=\"solucao\">\n              {solution.map((val, idx) => (\n                <span key={idx}>\n                  x<sub>{idx + 1}</sub> = {val.toFixed(4)}\n                  {idx < solution.length - 1 && ', '}\n                </span>\n              ))}\n            </p>\n            <p className=\"iteracoes\">Quantidade de Iterações: {iterations}</p>\n            <PdfGenerator results={iterationResults} /> {/* Componente para gerar PDF */}\n          </div>\n        )}\n\n      </main>\n\n      <footer className=\"App-footer\">\n        <p>Álgebra Linear - BSI UFRA | 2023</p>\n      </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}